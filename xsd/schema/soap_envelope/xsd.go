// Code generated by xsdgen. DO NOT EDIT.

package soap_envelope

import "encoding/xml"

type Body []string

func (a Body) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *Body) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

type Detail []string

func (a Detail) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *Detail) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

type Envelope struct {
	Header string `xml:"http://www.w3.org/2003/05/soap-envelope Header,omitempty"`
	Body   string `xml:"http://www.w3.org/2003/05/soap-envelope Body"`
}

// Fault reporting structure
type Fault struct {
	Code   Faultcode   `xml:"http://www.w3.org/2003/05/soap-envelope Code"`
	Reason Faultreason `xml:"http://www.w3.org/2003/05/soap-envelope Reason"`
	Node   string      `xml:"http://www.w3.org/2003/05/soap-envelope Node,omitempty"`
	Role   string      `xml:"http://www.w3.org/2003/05/soap-envelope Role,omitempty"`
	Detail Detail      `xml:"http://www.w3.org/2003/05/soap-envelope Detail,omitempty"`
}

type Faultcode struct {
	Value   FaultcodeEnum `xml:"http://www.w3.org/2003/05/soap-envelope Value"`
	Subcode Subcode       `xml:"http://www.w3.org/2003/05/soap-envelope Subcode,omitempty"`
}

// May be one of tns:DataEncodingUnknown, tns:MustUnderstand, tns:Receiver, tns:Sender, tns:VersionMismatch
type FaultcodeEnum xml.Name

type Faultreason struct {
	Text []Reasontext `xml:"http://www.w3.org/2003/05/soap-envelope Text"`
}

// Elements replacing the wildcard MUST be namespace qualified, but can be in the targetNamespace
type Header []string

func (a Header) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *Header) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

type NotUnderstoodType struct {
	Qname xml.Name `xml:"qname,attr"`
}

type Reasontext struct {
	Value string `xml:",chardata"`
	Lang  string `xml:"lang,attr"`
}

type Subcode struct {
	Value   xml.Name `xml:"http://www.w3.org/2003/05/soap-envelope Value"`
	Subcode Subcode  `xml:"http://www.w3.org/2003/05/soap-envelope Subcode,omitempty"`
}

type SupportedEnvType struct {
	Qname xml.Name `xml:"qname,attr"`
}

type UpgradeType struct {
	SupportedEnvelope []SupportedEnvType `xml:"http://www.w3.org/2003/05/soap-envelope SupportedEnvelope"`
}
